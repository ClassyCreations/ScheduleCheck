plugins {
  id 'java'
  id 'application'
  id 'org.springframework.boot' version '2.0.5.RELEASE'
  id 'ninja.miserable.blossom' version "1.0.1"
}

group 'com.herocc.school.aspencheck'
version '3.0-SNAPSHOT'

sourceCompatibility = 1.8
mainClassName = group + ".AspenCheck"

repositories {
  jcenter()
}

dependencies {
  compile 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
  compile 'org.springframework.boot:spring-boot-starter-web'

  compile 'org.jsoup:jsoup:1.10.2' // Web Parser
  compile 'org.mnode.ical4j:ical4j:2.0.2' // iCal parser
  compile 'org.apache.commons:commons-csv:1.4' // Parsing CSV Files
  compile 'com.rollbar:rollbar-java:1.0.0-beta-3'

  compileOnly 'org.projectlombok:lombok:1.18.2' // Lombok Library

  testCompile group: 'junit', name: 'junit', version: '4.12' // Test Suite
  testCompile 'org.springframework.boot:spring-boot-starter-test'

  components {
    withModule('org.springframework:spring-beans') {
      allVariants {
        withDependencyConstraints {
          // Need to patch constraints because snakeyaml is an optional dependency
          it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
        }
      }
    }
  }
}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': mainClassName,
      'Version': version
    )
  }
}

blossom {
  replaceToken '@@VERSION@@', version
}

task stage(type: Copy, dependsOn: [clean, build]) {
  from jar.archivePath
  into project.rootDir
  rename {
    'app.jar'
  }
}
stage.mustRunAfter(clean)

clean << {
  project.file('app.jar').delete()
}
