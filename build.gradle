plugins {
  id 'java'
  id 'application'
  id 'org.springframework.boot' version '2.5.5'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'net.kyori.blossom' version '1.2.0'
}

group = 'com.herocc.school.aspencheck'
version = '3.2-SNAPSHOT'

sourceCompatibility = 1.8
mainClassName = group + ".AspenCheck"

repositories {
  mavenCentral()
}

dependencies {
  // Not sure best practice for these three are `implementation` or `api`
  implementation 'org.jsoup:jsoup:1.10.2' // Web Parser
  implementation 'org.mnode.ical4j:ical4j:2.0.2' // iCal parser
  implementation 'org.apache.commons:commons-csv:1.4' // Parsing CSV Files

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation 'org.springdoc:springdoc-openapi-ui:1.5.11'
  implementation 'org.springdoc:springdoc-openapi-javadoc:1.5.11'

  implementation 'com.rollbar:rollbar-java:1.7.8'

  compileOnly 'org.projectlombok:lombok:1.18.10' // Lombok Library
  annotationProcessor 'org.projectlombok:lombok:1.18.10'

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

// Allows using `java -jar`
// TODO probably a better way to fix this (via spring?)
jar {
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
      'Main-Class': mainClassName,
      'Version': archiveVersion
    )
  }
}

test {
  useJUnitPlatform()
}

blossom {
  replaceToken '@@VERSION@@', version
}

task stage(type: Copy, dependsOn: [clean, build]) {
  from bootJar.archiveFile
  into project.rootDir
  rename {
    'app.jar'
  }
}
stage.mustRunAfter(clean)

clean.doLast {
  project.file('app.jar').delete()
}

wrapper {
  distributionType = Wrapper.DistributionType.BIN
}
